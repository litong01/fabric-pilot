node {
  def ROOTDIR = pwd()
  parameters {[
    string(name: 'envprefix', defaultValue: 'env'),
    string(name: 'netprefix', defaultValue: 'net'),
    booleanParam(name: 'skipprov', defaultValue: false)
  ]}

  stage("Get Lastest Code") {
    deleteDir()
    sh '''
      [ -e fabric-pilot ] || mkdir fabric-pilot
      [ -e fabric-test ] || mkdir fabric-test
    '''

    dir('fabric-pilot') {
      git changelog: false, poll: false, url: 'https://github.com/litong01/fabric-pilot.git'
    }

    dir('fabric-test') {
      git changelog: false, poll: false, url: 'https://github.com/hyperledger/fabric-test.git'
      sh '''
        git submodule update --init --recursive
        rm -rf cello/src/agent/ansible/vars/*
      '''
    }

    sh 'cp fabric-pilot/profiles/* fabric-test/cello/src/agent/ansible/vars'

    dir("fabric-test/cello/src/agent/ansible") {
      configFileProvider([configFile(fileId: 'publickey', targetLocation: 'run/publickey')]) {
      }
      configFileProvider([configFile(fileId: 'privatekey', targetLocation: 'run/privatekey')]) {
      }
      if (params.skipprov) {
        configFileProvider([configFile(fileId: 'runhosts', targetLocation: 'run/runhosts')]) {
        }
      }
    }
  }

  def envfiles = null
  dir("fabric-test/cello/src/agent/ansible/vars") {
    envfiles = findFiles(glob: params.envprefix + '*.yml')
  }

  dir("fabric-test/cello/src/agent/ansible") {
    sshagent(['nodekey']) {
      withCredentials([usernamePassword(credentialsId: 'tongosid',
                                        passwordVariable: 'password',
                                        usernameVariable: 'username')]) {
        for (envitem in envfiles) {

          def fenv = envitem.name.tokenize('.')[0]

          try {
            if (params.skipprov == false) {
              stage("Provision system ${fenv}") {
                ansiblePlaybook credentialsId: 'ubuntu',
                  extras: '-e "mode=apply cloud_type=os env=' + fenv +'"',
                  inventory: 'hosts',
                  playbook: 'provcluster.yml',
                  sudoUser: null
                sh '''
                  cp run/runhosts ../../../../tools/ATD/runhosts 
                '''
              }
            }

            stage("Initialize systems ${fenv}") {
              ansiblePlaybook credentialsId: 'ubuntu',
                extras: '-e "mode=apply env=' + fenv +'"',
                inventory: 'run/runhosts',
                playbook: 'initcluster.yml',
                sudoUser: null
            }

            def netfiles = null
            dir("vars") {
              netfiles = findFiles(glob: params.netprefix + '*.yml')
            }

            for (netitem in netfiles) {
              def dtype = netitem.name.tokenize('.')[0]
              try {
                stage("Setup fabric network ${dtype}") {
                  ansiblePlaybook credentialsId: 'ubuntu',
                    extras: '-e "mode=apply env=' + dtype +'"',
                    inventory: 'run/runhosts',
                    playbook: 'setupfabric.yml',
                    sudoUser: null
                }

                dir("${ROOTDIR}/fabric-test/tools/ATD") {
                  stage("Launch PTE tests for env ${fenv} ${dtype}") {
                    ansiblePlaybook credentialsId: 'ubuntu',
                      extras: '-e "mode=apply env=' + dtype +' tool_type=pte chaincode=samplecc testcase=FAB-3989-4i-TLS"',
                      inventory: 'runhosts',
                      playbook: 'ptesetup.yml',
                      sudoUser: null
                      skippedTags: 'code'
                  }
                  
                  stage("Destroy PTE tests for env ${fenv} ${dtype}") {
                    ansiblePlaybook credentialsId: 'ubuntu',
                      extras: '-e "mode=destroy env=' + dtype +' tool_type=pte chaincode=samplecc testcase=FAB-3989-4i-TLS"',
                      inventory: 'runhosts',
                      playbook: 'ptesetup.yml',
                      sudoUser: null
                      skippedTags: 'cleanfabric'
                  }                  
                }
              }
              finally {
                stage("Destroy fabric network ${dtype}") {
                  ansiblePlaybook credentialsId: 'ubuntu',
                    extras: '-e "mode=destroy env=' + dtype +'"',
                    inventory: 'run/runhosts',
                    playbook: 'setupfabric.yml',
                    sudoUser: null,
                    skippedTags: 'clean'
                }
              }
            }

          }
          finally {
            if (params.skipprov == false) {
              stage("Remove system ${fenv}") {
                ansiblePlaybook credentialsId: 'ubuntu',
                  extras: '-e "mode=destroy cloud_type=os env=' + fenv +'"',
                  inventory: 'hosts',
                  playbook: 'provcluster.yml',
                  sudoUser: null
              }
            }
            else {
              stage("Cleanup system") {
                ansiblePlaybook credentialsId: 'ubuntu',
                  extras: '-e "mode=destroy env=' + fenv +'"',
                  inventory: 'run/runhosts',
                  playbook: 'initcluster.yml',
                  sudoUser: null
              }
            }
          } 

        }
      }
    }
  }
}
