node {
  def ROOTDIR = pwd()
  parameters {[
    string(name: 'envprefix', defaultValue: 'env'),
    string(name: 'netprefix', defaultValue: 'net'),
    string(name: 'runJobs', defaultValue: 'prov,init,setup,test'),
    string(name: 'runActions', defaultValue: 'apply,destroy'),
    string(name: 'waitTime', defaultValue: '0'),
    booleanParam(name: 'cleanRun', defaultValue: true)
  ]}

  print 'runJobs=' + params.runJobs
  print 'runActions=' + params.runActions
  print 'waitTime=' + params.waitTime
  
  def runjobs = params.runJobs.tokenize(',')
  def runactions = params.runActions.tokenize(',')
  def cleanrun = params.cleanRun
  def waittime = params.waitTime.toInteger() * 1000

  stage("Get Lastest Code") {
    if (params.cleanRun) {
      deleteDir()
    } 
    sh '''
      [ -e fabric-pilot ] || mkdir fabric-pilot
      [ -e fabric-test ] || mkdir fabric-test
    '''

    dir('fabric-pilot') {
      git changelog: false, poll: false, url: 'https://github.com/litong01/fabric-pilot.git'
    }

    if (params.cleanRun) {
      dir('fabric-test') {
        git changelog: false, poll: false, url: 'https://github.com/hyperledger/fabric-test.git'
        sh '''
          git pull https://gerrit.hyperledger.org/r/fabric-test refs/changes/05/19605/4
          git submodule update --init --recursive
          rm -rf cello
          git clone https://gerrit.hyperledger.org/r/cello
          rm -rf cello/src/agent/ansible/vars/*
        '''
      }  
    }

    sh '''
      cp fabric-pilot/profiles/* fabric-test/cello/src/agent/ansible/vars
      cp fabric-pilot/pipelines/*.yml fabric-test/cello/src/agent/ansible
      cp fabric-pilot/profiles/mh8channels.yml fabric-test/tools/ATD/vars/
      cp fabric-pilot/pipelines/configtx.j2 fabric-test/cello/src/agent/ansible/roles/deploy_compose/certsetup/templates
      cp fabric-pilot/pipelines/kafka-compose.j2 fabric-test/cello/src/agent/ansible/roles/deploy_compose/fabricsetup/templates
    '''

    dir("fabric-test/cello/src/agent/ansible") {
      configFileProvider([configFile(fileId: 'publickey', targetLocation: 'run/publickey')]) {
      }
      configFileProvider([configFile(fileId: 'privatekey', targetLocation: 'run/privatekey')]) {
      }
      if (params.skipprov) {
        configFileProvider([configFile(fileId: 'runhosts', targetLocation: 'run/runhosts')]) {
        }
      }
    }
  }

  def envfiles = null
  def testconfig = null
  dir("fabric-test/cello/src/agent/ansible/vars") {
    envfiles = findFiles(glob: params.envprefix + '*.yml')
    testconfig = readYaml file: 'testconfig.yml'
  }

  dir("fabric-test/cello/src/agent/ansible") {
    sshagent(['nodekey']) {
      withCredentials([usernamePassword(credentialsId: 'tongosid',
                                        passwordVariable: 'password',
                                        usernameVariable: 'username')]) {
        for (envitem in envfiles) {

          def fenv = envitem.name.tokenize('.')[0]

          try {
            stage("Provision and initialize system ${fenv}") {
              if (runjobs.contains('prov') && runactions.contains('apply')) {
                ansiblePlaybook credentialsId: 'ubuntu',
                  extras: '-e "mode=apply cloud_type=os env=' + fenv +'"',
                  inventory: 'hosts',
                  playbook: 'provcluster.yml',
                  sudoUser: null
                sh '''
                  cp run/runhosts ../../../../tools/ATD/runhosts 
                '''
              }
              if (waittime > 0) { sleep waittime }
              if (runjobs.contains('init') && runactions.contains('apply')) {
                ansiblePlaybook credentialsId: 'ubuntu',
                  extras: '-e "mode=apply env=' + fenv +'"',
                  inventory: 'run/runhosts',
                  playbook: 'initcluster.yml',
                  sudoUser: null
              }
            }

            def netfiles = null
            dir("vars") {
              netfiles = findFiles(glob: params.netprefix + '*.yml')
            }

            for (netitem in netfiles) {
              def dtype = netitem.name.tokenize('.')[0]
              for (testitem in testconfig[dtype]) {
                def tname = testitem['name']
                try {
                  stage("Setup nmon and nmonchart") {
                    ansiblePlaybook credentialsId: 'ubuntu',
                      extras: '-e "user=ubuntu tname=' + tname + '"',
                      inventory: 'run/runhosts',
                      playbook: 'setupnmon.yml',
                      sudoUser: null
                  }

                  if (waittime > 0) { sleep waittime }

                  stage("Setup fabric network ${dtype}") {
                    if (runjobs.contains('setup') && runactions.contains('apply')) {
                      ansiblePlaybook credentialsId: 'ubuntu',
                        extras: '-e "mode=apply env=' + dtype +'"',
                        inventory: 'run/runhosts',
                        playbook: 'setupfabric.yml',
                        sudoUser: null
                    }
                  }

                  if (waittime > 0) { sleep waittime }

                  try {
                    dir("${ROOTDIR}/fabric-test/tools/ATD") {
                      stage("Launch PTE test ${tname} for env ${fenv} ${dtype}") {
                        if (runjobs.contains('test') && runactions.contains('apply')) {
                          ansiblePlaybook credentialsId: 'ubuntu',
                            extras: '-e "mode=apply env=' + dtype + ' ' + testitem['extra'] + '"',
                            inventory: 'runhosts',
                            playbook: 'ptesetup.yml',
                            sudoUser: null,
                            skippedTags: testitem['skip_tags']
                        }
                      }
                      stage("Destroy PTE test ${tname} for env ${fenv} ${dtype}") {
                        if (runjobs.contains('test') && runactions.contains('destroy')) {
                          ansiblePlaybook credentialsId: 'ubuntu',
                            extras: '-e "mode=destroy env=' + dtype + ' ' + testitem['extra'] + '"',
                            inventory: 'runhosts',
                            playbook: 'ptesetup.yml',
                            sudoUser: null,
                            skippedTags: testitem['skip_tags']
                        }
                      }                  
                    }
                  }
                  finally {
                    stage("Generate nmonchart") {
                      ansiblePlaybook credentialsId: 'ubuntu',
                        extras: '-e "user=ubuntu tname=' + tname + '"',
                        inventory: 'run/runhosts',
                        playbook: 'getnmchart.yml',
                        sudoUser: null
                    }
                  }
                }
                finally {
                  stage("Destroy fabric network ${dtype}") {
                    if (runjobs.contains('setup') && runactions.contains('destroy')) {
                      ansiblePlaybook credentialsId: 'ubuntu',
                        extras: '-e "mode=destroy env=' + dtype +'"',
                        inventory: 'run/runhosts',
                        playbook: 'setupfabric.yml',
                        sudoUser: null,
                        skippedTags: 'clean'
                    }
                  }
                }
              }
            }
          }
          finally {
            stage("Cleanup system") {
              if (runjobs.contains('init') && runactions.contains('destroy')) {
                ansiblePlaybook credentialsId: 'ubuntu',
                  extras: '-e "mode=destroy env=' + fenv +'"',
                  inventory: 'run/runhosts',
                  playbook: 'initcluster.yml',
                  sudoUser: null
              }            
              if (runjobs.contains('prov') && runactions.contains('destroy')) {
                ansiblePlaybook credentialsId: 'ubuntu',
                  extras: '-e "mode=destroy env=' + fenv +'"',
                  inventory: 'hosts',
                  playbook: 'provcluster.yml',
                  sudoUser: null
              }
            }
          }

        }
      }
    }
  }
}
