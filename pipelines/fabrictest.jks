node {

  parameters {[
    string(name: 'envprefix', defaultValue: 'env'),
    string(name: 'netprefix', defaultValue: 'net'),
    booleanParam(name: 'skipprov', defaultValue: false)
  ]}

  stage("Get Lastest Code") {
    deleteDir()
    sh '''
       git init
       git remote add origin https://gerrit.hyperledger.org/r/cello
       git config core.sparsecheckout true
       echo "src/agent/ansible" >> .git/info/sparse-checkout
       git pull --depth=1 origin master
       [ -e fabrictest ] || mkdir fabrictest
       rm -rf src/agent/ansible/vars/*
    '''

    dir('fabrictest') {
      git changelog: false, poll: false, url: 'https://github.com/litong01/fabric-test.git'
    }

    sh 'cp fabrictest/profiles/* src/agent/ansible/vars'

    dir("src/agent/ansible") {
      configFileProvider([configFile(fileId: 'publickey', targetLocation: 'run/publickey')]) {
      }
      configFileProvider([configFile(fileId: 'privatekey', targetLocation: 'run/privatekey')]) {
      }
      if (params.skipprov) {
        configFileProvider([configFile(fileId: 'runhosts', targetLocation: 'run/runhosts')]) {
        }
      }
    }
  }

  def envfiles = null
  dir("src/agent/ansible/vars") {
    envfiles = findFiles(glob: params.envprefix + '*.yml')
  }

  dir("src/agent/ansible") {
    for (envitem in envfiles) {
      sshagent(['nodekey']) {
        withCredentials([usernamePassword(credentialsId: 'tongosid',
                                          passwordVariable: 'password',
                                          usernameVariable: 'username')]) {
          def fenv = envitem.name.tokenize('.')[0]
          
          if (params.skipprov == false) {
            stage("Provision system ${fenv}") {
              ansiblePlaybook credentialsId: 'ubuntu',
                extras: '-e "mode=apply cloud_type=os env=' + fenv +'"',
                inventory: 'hosts',
                playbook: 'provcluster.yml',
                sudoUser: null
            }
          }
          
          stage("Initialize systems ${fenv}") {
            ansiblePlaybook credentialsId: 'ubuntu',
              extras: '-e "mode=apply env=' + fenv +'"',
              inventory: 'run/runhosts',
              playbook: 'initcluster.yml',
              sudoUser: null
          }

          def netfiles = null
          dir("vars") {
            netfiles = findFiles(glob: params.netprefix + '*.yml')
          }

          for (netitem in netfiles) {
            def dtype = netitem.name.tokenize('.')[0]
            stage("Setup fabric network ${dtype}") {
              ansiblePlaybook credentialsId: 'ubuntu',
                extras: '-e "mode=apply env=' + dtype +'"',
                inventory: 'run/runhosts',
                playbook: 'setupfabric.yml',
                sudoUser: null
            }

            stage("Run tests") {
              sh 'echo "Here we insert all the tests"'
            }

            stage("Destroy fabric network ${dtype}") {
              ansiblePlaybook credentialsId: 'ubuntu',
                extras: '-e "mode=destroy env=' + dtype +'"',
                inventory: 'run/runhosts',
                playbook: 'setupfabric.yml',
                sudoUser: null
            }
          }

          if (params.skipprov == false) {
            stage("Remove system ${fenv}") {
              ansiblePlaybook credentialsId: 'ubuntu',
                extras: '-e "mode=destroy cloud_type=os env=' + fenv +'"',
                inventory: 'hosts',
                playbook: 'provcluster.yml',
                sudoUser: null
            }
          }
          else {
            stage("Cleanup system") {
              ansiblePlaybook credentialsId: 'ubuntu',
                extras: '-e "mode=destroy env=' + fenv +'"',
                inventory: 'run/runhosts',
                playbook: 'initcluster.yml',
                sudoUser: null
            }
          }          

        }
      }
    }
  }
}
